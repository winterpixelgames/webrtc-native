#!/usr/bin/env python

import os, sys, platform, json, subprocess
import builders

def add_sources(sources, dirpath, extension):
    for f in os.listdir(dirpath):
        if f.endswith("." + extension):
            sources.append(dirpath + "/" + f)


def replace_flags(flags, replaces):
    for k, v in replaces.items():
        if k in flags:
            flags[flags.index(k)] = v

Import("env")

env = env.Clone()

# Set our C and C++ standard requirements.
if not env.msvc:
    env.Append(CXXFLAGS=['-std=c++17'])
else:
    # MSVC doesn't have clear C standard support, /std only covers C++.
    # We apply it to CCFLAGS (both C and C++ code) in case it impacts C features.
    env.Append(CCFLAGS=["/std:c++17"])

# Patch base env
replace_flags(env["CCFLAGS"], {
	"-mios-simulator-version-min=10.0": "-mios-simulator-version-min=11.0",
	"-miphoneos-version-min=10.0": "-miphoneos-version-min=11.0",
	"/std:c++14": "/std:c++17",
	"-std=c++14": "-std=c++17",
})

if env["target"] == "debug":
	env.Append(CPPDEFINES=["DEBUG_ENABLED"])

if env["platform"] == "windows" and env["use_mingw"]:
	env.Append(LINKFLAGS=["-static-libgcc"])

env["arch_suffix"] = env["arch"]

target = env["target"]
result_path = "bin"
result_name = "webrtcnative.{}".format(env["SHLIBSUFFIX"])
#result_path = os.path.join("bin", "gdnative" if env["godot_version"] == "3" else "extension", "webrtc" if env["target"] == "release" else "webrtc_debug")

# Dependencies
deps_source_dir = "deps"
env.Append(BUILDERS={
    "BuildOpenSSL": env.Builder(action=builders.ssl_action, emitter=builders.ssl_emitter),
    "BuildLibDataChannel": env.Builder(action=builders.rtc_action, emitter=builders.rtc_emitter),
})

# SSL
ssl = env.BuildOpenSSL(env.Dir(builders.get_ssl_build_dir(env)), env.Dir(builders.get_ssl_source_dir(env)))

env.Prepend(CPPPATH=[builders.get_ssl_include_dir(env)])
env.Prepend(LIBPATH=[builders.get_ssl_build_dir(env)])
env.Append(LIBS=[ssl])

# RTC
rtc = env.BuildLibDataChannel(env.Dir(builders.get_rtc_build_dir(env)), [env.Dir(builders.get_rtc_source_dir(env))] + ssl)

env.Append(LIBPATH=[builders.get_rtc_build_dir(env)])
env.Append(CPPPATH=[builders.get_rtc_include_dir(env)])
env.Prepend(LIBS=[rtc])

# Our includes and sources
env.Append(CPPPATH=["src/"])
sources = []
sources.append(
    [
        "src/WebRTCLibDataChannel.cpp",
        "src/WebRTCLibPeerConnection.cpp",

    ]
)

env.Append(CPPDEFINES=["WEBRTCNATIVE_MODULE"])
#sources.append("register_types.cpp")
#add_sources(sources, "src/net/", "cpp")

env.Depends(sources, [ssl, rtc])

if env["platform"] == "windows" and env["use_mingw"]:
    env.Append(LIBS=["iphlpapi", "ws2_32", "bcrypt"])


library = env.SharedLibrary(target=os.path.join(result_path, "lib", result_name), source=sources)
Default(library)

